#Example for the Event-Driven-Relation-language
#Build in Types:
# event
# char
# bool
# list
# function
# sink
#-------------------------
#Build in Variables
# system-in  event[char]
# system-out event[char]
# not function(function(bool),(function(bool))
# eq function(?,?,bool)
# append function(list,list,list)
#-------------------------
#Build in Keywords
# False
# True
# '' for chars
#-------------------------
#Structural Keys :
Application:
  Inputs:
    - palyndrom-in-chain: system-in
  Outputs:
    - palyndrom-out-chain: system-out
---
Function:
  Name: into-word
  Inputs:
    - $0: event[char]
  Buffers:
    - $1
  Output: list[char]
  Rules:
    - $0:
       - ' '
       - or
       - EOF
      $1: ''
      result:
        - Raise
        - $1
    - $0: |
      $1:
        - $1
        - append
        - $0
      result: |
---
Relation:
  Inputs:
    - palyndrom-in-chain
  Output: possible-palyndrom
  Like: into-word
---
Table:
  Inputs:
    $0: possible-palyndrom
  Buffers:
    - $1
  Output: inverse-possible-palyndrom
  Rules:
    - $0: EOF
      $1: ''
      result:
        - Raise
        - $1
    - $0: |
      $1:
        - $0
        - append
        - $1
      result: |
---
Table
  Inputs:
     $0: possible-palyndrom
     $1: inverse-possible-palyndrom
  Output: is-palyndrom
  Synchronization-Rule: $0 every $1
  Rules:
   - $0: $1
     $1: |
     result: True
   - $0:
       - not
       - $1
     $1: |
     result: False
---
Table:
  Inputs :
    $0: is-palyndrom
  Output : palyndrom-out-chain
  Rules:
  - $0: True
    result: Raise "True"
  - $0: False
    result: Raise "False"
