-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package EDRL
@version 0.1.0.0


-- | Das Modul YMLReader stellt Typen zur Verfügung, die aus yml-files
--   eingelesen werden können
module YMLReader

-- | repräsentiert eine einlesbare Relation
data Relation
Relation :: [String] -> String -> [String] -> Relation
[input] :: Relation -> [String]
[output] :: Relation -> String
[rule] :: Relation -> [String]

-- | input, bestehend aus name und Quelle
data Application_Input
Application_Input :: String -> String -> Application_Input
[inputname] :: Application_Input -> String
[origin] :: Application_Input -> String

-- | output, bestehend aus name und Ziel (Ziel wird aktuell noch nicht
--   verwendet)
data Application_Output
Application_Output :: String -> String -> Application_Output
[outputname] :: Application_Output -> String
[target] :: Application_Output -> String

-- | repräsentiert eine einlesbare Applikation, bestehend aus mehreren in
--   und outputs
data Application
Application :: [Application_Input] -> [Application_Output] -> Application
[appinput] :: Application -> [Application_Input]
[appoutput] :: Application -> [Application_Output]
instance GHC.Show.Show YMLReader.Application
instance GHC.Classes.Eq YMLReader.Application
instance GHC.Generics.Generic YMLReader.Application
instance GHC.Show.Show YMLReader.Application_Output
instance GHC.Classes.Eq YMLReader.Application_Output
instance GHC.Generics.Generic YMLReader.Application_Output
instance GHC.Show.Show YMLReader.Application_Input
instance GHC.Classes.Eq YMLReader.Application_Input
instance GHC.Generics.Generic YMLReader.Application_Input
instance GHC.Show.Show YMLReader.Relation
instance GHC.Classes.Eq YMLReader.Relation
instance GHC.Generics.Generic YMLReader.Relation
instance Data.Aeson.Types.FromJSON.FromJSON YMLReader.Application
instance Data.Aeson.Types.FromJSON.FromJSON YMLReader.Application_Output
instance Data.Aeson.Types.FromJSON.FromJSON YMLReader.Application_Input
instance Data.Aeson.Types.FromJSON.FromJSON YMLReader.Relation


-- | Das Modul DataDefinitions stellt Typen zur Verfügung, welche für die
--   Steuerung des Interpreters relevant sind.
module DataDefinitions

-- | Ein mit Namen versehener Wert, wird für EDRL-Variablen verwendet
data Named_Value
Named_Value :: String -> Double -> Named_Value
[name] :: Named_Value -> String
[value] :: Named_Value -> Double

-- | Stellt die verschiedenen von der Applikation verwendeten Events zur
--   Verfügung. Achtung: nicht an jeder Stelle ist jedes Event möglich
data Event
Add_Relation :: Relation -> Event
Start_Execution :: Application -> Event
Read_Output :: Application -> Event
Error :: Event
Trigger_Event :: (Named_Value) -> Event

-- | Der Zustand der Application. nicht zu verwechseln mit der Monade State
data State
State :: Set String -> Set String -> [Named_Value] -> Map String [String] -> Map String [String] -> [String] -> State
[missing] :: State -> Set String
[available] :: State -> Set String
[values] :: State -> [Named_Value]
[order] :: State -> Map String [String]
[functions] :: State -> Map String [String]
[errors] :: State -> [String]
instance GHC.Show.Show DataDefinitions.State
instance GHC.Classes.Eq DataDefinitions.State
instance GHC.Show.Show DataDefinitions.Event
instance GHC.Classes.Eq DataDefinitions.Event
instance GHC.Classes.Ord DataDefinitions.Named_Value
instance GHC.Show.Show DataDefinitions.Named_Value
instance GHC.Classes.Eq DataDefinitions.Named_Value


-- | Das Modul Interpreter stellt Funktionen zur Verfügung , welche
--   Zustände und Events interpretieren
module Interpreter

-- | process ruft mit den übergebenen Parametern der Reihe nach update auf.
--   zusätzlich kann es noch das Event <a>Read_Output</a> verarbeiten,
--   welches IO Aktionen erfordert
process :: State -> [Event] -> IO State

-- | update arbeitet ein Event in den Zustand ein und lieferten diesen
--   Neuen Zustand zurück. folgende <a>Event</a> sind möglich:
--   <a>Add_Relation</a> <a>Start_Execution</a> <a>Trigger_Event</a> die
--   Funktion geht davon aus, dass das aufgerufene Event in diesem Zustand
--   möglich ist.
update :: State -> Event -> State

-- | update' ist update mit verdrehter signatur, für details siehe
--   <a>update</a>
update' :: Event -> State -> State
